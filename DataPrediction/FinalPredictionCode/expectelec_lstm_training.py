# -*- coding: utf-8 -*-
"""ExpectElec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E6Z0HXAQiDjN3NuFGgrAqByjpiUYdxx0
"""

from keras.models import Model
from keras.layers import Input, Dense, LSTM, Bidirectional
from keras import backend as K
import numpy as np
import matplotlib.pyplot as plt
import csv
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding


def generateX(a, n):
     x_train = []
     y_train = []
     for i in range(len(a)):
         x = a[i:(i + n)]
         if (i + n) < len(a):
             x_train.append(x)
             y_train.append(a[i + n])
         else:
             break
     return np.array(x_train), np.array(y_train)

def generateData(a, n, m):
     x_train = []
     y_train = []
     for i in range(len(a)):
         x = a[i:(i + n)]
         y = a[(i+n):(i+n+m)]
         if (i + n + m) < len(a):
             x_train.append(x)
             y_train.append(y)
         else:
             break
     return np.array(x_train), np.array(y_train)

# load data from csv file
data = np.loadtxt("/content/drive/My Drive/retail_price.csv", delimiter=",")

# 1D array to 2D array for minmaxScaler
t_data = data.transpose()
test_data = t_data.reshape(50000,1)

# data를 0 - 1 사이로
minMaxScaler = MinMaxScaler()
print(minMaxScaler.fit(test_data))
uni_data = minMaxScaler.transform(test_data)

#x, y = generateX(uni_data, 84) #72(6시간) - 12 (1시간)
x, y = generateData(uni_data, 72, 12)
x = x.reshape(-1,72,1)
y = y.reshape(-1,12,1)

# 학습용 데이터와 테스트 데이터
x_train = x[:40000, :, :]
y_train = y[:40000:, :]
x_test = x[40000:, :, :]
y_test = y[40000:, :]



# 2층-양방항 구조의 LSTM 모델을 생성한다.
K.clear_session()     # 모델 생성전에 tensorflow의 graph 영역을 clear한다.
xInput = Input(batch_shape=(None, x_train.shape[1], x_train.shape[2]))
xLstm_1 = LSTM(10, return_sequences = True)(xInput)
xLstm_2 = Bidirectional(LSTM(10))(xLstm_1)
xOutput = Dense(12)(xLstm_2)

model = Model(xInput, xOutput)
model.compile(loss='mse', optimizer='adam')

# 학습 500 20
history = model.fit(x_train, y_train, epochs=20, batch_size=20,verbose=1, validation_data=(x_test, y_test))

# 예측
y_hat = model.predict(x_test, batch_size=1)

model.save('retail_price.h5')

from google.colab import drive
drive.mount('/content/drive')

# 예측 결과 시각화
a_axis = np.arange(0, len(y_train))
b_axis = np.arange(len(y_train), len(y_train) + len(y_hat))

plt.figure(figsize=(20,10))
plt.plot(a_axis, y_train.reshape(40000,12), 'o-')
plt.plot(b_axis, y_hat.reshape(9916, 12), 'o-', color='red', label='Predicted')
plt.plot(b_axis, y_test.reshape(9916, 12), 'o-', color='green', alpha=0.2, label='Actual')
plt.legend()
plt.show()

# 모델 평가하기
#print(y_test)
acc = (y_hat.reshape(9916, 12) - y_test.reshape(9916, 12)) / y_test.reshape(9916, 12)
#print(acc)
acc2 = np.abs(acc) # 오차
#print(acc2)

accuracy = np.average(1-acc2)
print(accuracy)

print(x_test.shape)
print(y_test.shape)
print(y_hat.shape)

from keras.models import load_model
test_model = load_model("/content/drive/My Drive/LSTM_model.h5")

test_model.summary()

#tx_test = []

#print(tx_test.shape)
#ty_hat = test_model.predict(tx_test, batch_size=1)

#print(ty_hat)